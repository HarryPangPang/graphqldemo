##  什么是 GraphQL

`GraphQL` 是一个Facebook于2012开发出来且2015开源的应用层的查询语言,你需要在后台定义一个基于GraphQL的图形模式,然后你的客户端就可以查询他们想要的数据,而不需要后台重新定义一个接口返回你需要的数据.

GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。



简单来说，GraphQL 是一个开源的查询语言和协议 API。你可以把 GraphQL 想象成 SQL，只是把数据库换成 API。

GraphQL API 是基于 REST 架构的现代化替代者。不同于 REST，GraphQL 允许客户端根据其需要请求特定的部分数据，这与请求固定数据结构的方式不同。

![截屏2020-06-17上午11.28.07](/Users/lilithgames/Documents/截屏2020-06-17上午11.28.07.png)

### 与 REST 比起来，GraphQL 的优势	

GraphQL 和 REST 都是一种规范，是用来构建和使用 API 的规范。这两种技术常用的特性是，当它们通过发送请求来检索资源时，都能返回所请求的 JSON 数据。

另外，它们都能通过 HTTP 进行操作。此外，REST 和 GraphQL 字段的接入点或多或少都是类似的，因为它们都是作为数据调用服务器上函数的入口。

尽管它们有这么些共同点，但是它们的概念模型也有着很大不同。GraphQL 是基于图来创建的，而 REST 是基于文件而创建的。

说起性能，GraphQL 要快得多，因为你可以通过选择你感兴趣的查询字段来减少请求次数。

以下是使用了 GraphQL API（而非 REST API）之后所带来的一些较为明显的好处。

#### 1. 与多系统（Multifaceted Systems）和微服务能较好匹配



GraphQL 将多个系统集成到 API 中，从而形成了统一的 API 接口，并且能够将各个系统的复杂性隐藏在 API 背后。GraphQL 服务器的任务就是从当前这些系统中获取数据，并且将数据打包放入 GraphQL 返回的数据格式中。

许多第三方 API 和传统的基础设施在这些年经历了大举扩张，对于这样的 API 和基础设施，GraphQL 与多系统的匹配性尤其重要，因为匹配得不好就会带来维护负担。

如果系统从一个单一的后端迁移至微服务架构，把多个微服务融合进 GraphQL 模式能够帮助微服务间更好地通信。

即使每个微服务都定义了自己的 GraphQL 模式和自己的 GraphQL 接入点，多个微服务还是可以通过单一的 GraphQL API 网关整合到一个全局模式中。



#### 2. 通过单一的 API 调用获取信息

如果使用 REST API，那么开发者需要把多个接入点合并起来才能收集到所有需要的数据，因为 REST 散落分布在多个独立的接入点上。

GraphQL 与 REST 的主要区别就在这里。开发者仅仅通过一个 API 调用就可以请求到所需信息，而 GraphQL 会专注于主体任务。



#### 3. 不会存在过多或者过少获取数据的问题

从 REST 收到的响应来看，有一个不稳定的因素，即收到的信息里要么信息不足，要么信息冗余，这样就不可避免地需要再发出一次请求。而 GraphQL 就解决了这个问题，因为它只需请求一次，就能够获取所需的精确的数据信息。



#### 4.根据你的需求自定义请求格式

开发者按照 REST API 文档描述发出请求时，只能请求一些特定的接入点、相关函数和参数等。

而另一方面，GraphQL 可以描述数据类型、字段以及它们之间的任何交互连接点。这就允许 GraphQL 开发者自定义请求格式来获取必要的信息。



#### 5.类型检查机制

GraphQL 的自省特性能够为开发者导航到某个数据类型，找到相应的数据模式，确保 App 采用正确的结构发出有效的请求。

虽说 GraphQL 会检查已有模式的结构正确性，但是开发者想为当前查询添加新的字段也是可以的，开发者可以通过 GraphQL IDE 做到这点，他们不用去进一步验证数据格式的合法性，只需要开发者们为新数据结构编写解析器即可。

```javascript
type User {
  id: ID!
  name: String!
  joinedAt: DateTime!
  profileViews: Int! @default(value: 0)
}

type Query {
  user(id: ID!): User
}
```



#### 6. 代码即文档

GraphQL 的文档和 API 修改是同步进行的，因为 GraphQL 文档和其代码联系紧密。于是，代码修改，哪怕是一个字段、一次查询或者是数据类型的修改，也会触发文档的自动更新。



#### 7. 代码复用

为了我们写查询语句部分代码能有更好的可复用性，`GraphQL`还提供了`Fragments`（片段）, `Inline Fragments`（内联片段）和`Directives`（指令）功能。前两者可以类比为JavaScript中的`function`（函数）和`anonymous function`（匿名函数），`Directives`（指令）可以根据我们传的参数来决定某些字段是否需要返回。



#### 8.详细的报错信息

要确定什么地方出了问题，以及需要做什么来应对问题时，在 REST 中只要检查 HTTP 头的响应状态就足够了。

但是，在 GraphQL 中，如果在处理数据时报错了，后端会提供一条详细的信息，因为后端带有解析器。这些信息会提供查询中错误所在的精确位置。



#### 总结：

1. 数据冗余和请求冗余 (overfetching & underfetching)

2. 灵活而强类型的schema

3. 接口校验 (validation)

4. 接口变动，维护与文档

5. 开发效率

6. 后端或者中间层把gql封装相应业务对接数据库是难点，需要高端人力

   

   #### 缺点

   1. 需要前端多少学一点类sql语句，不过大部分场景可以封装好固定的sql语句

   2. 封装gql不好会产生sql性能问题，

   3. 前端排除bug需要一定的后端知识，前后端架构多少了解一些

   

### gql理想使用场景

数据库建好模型，前后端可以同步开始开发需求，前端只有少数需要依赖后端接口，前端开发过程中可以方便的拿到任何想要的数据，从而节省大量联调接口的时间，迅速的完成一个项目。



#### 基本概念

#### 操作类型 Operation Type：

​	GraphQL 的操作类型可以是 query、 mutation 或 subscription，描述客户端希望进行什么样的操作

1. query 查询：获取数据，比如查找，CRUD 中的 R
2. mutation 变更：对数据进行变更，比如增加、删除、修改，CRUD 中的 CUD
3. substription 订阅：当数据发生更改，进行消息推送

##### 对象类型和标量类型 Object Type & Scalar Type

如果一个 GraphQL 服务接受到了一个 query，那么这个 query 将从 RootQuery 开始查找，找到对象类型（Object Type）时则使用它的解析函数 Resolver 来获取内容，如果返回的是对象类型则继续使用解析函数获取内容，如果返回的是标量类型（Scalar Type）则结束获取，直到找到最后一个标量类型。

1. 对象类型：用户在 schema 中定义的 type
2. 标量类型：GraphQL 中内置有一些标量类型 String、 Int、 Float、 Boolean、 ID，用户也可以定义自己的标量类型

比如在 Schema 中声明

```
 type User {   
 name: String!
  age: Int
 }
```



这个 User 对象类型有两个字段，name 字段是一个为 String 的非空标量，age 字段为一个 Int 的可空标量。



##### 模式 Schema

如果你用过 MongoOSE，那你应该对 Schema 这个概念很熟悉，翻译过来是『模式』。

它定义了字段的类型、数据的结构，描述了接口数据请求的规则，当我们进行一些错误的查询的时候 GraphQL 引擎会负责告诉我们哪里有问题，和详细的错误信息，对开发调试十分友好。

Schema 使用一个简单的强类型模式语法，称为模式描述语言（Schema Definition Language, SDL)

##### 解析函数 Resolver

前端请求信息到达后端之后，需要由解析函数 Resolver 来提供数据，

解析函数接受四个参数，分别为

1. parent：当前上一个解析函数的返回值
2. args：查询中传入的参数
3. context：提供给所有解析器的上下文信息
4. info：一个保存与当前查询相关的字段特定信息以及 schema 详细信息的值

解析函数的返回值可以是一个具体的值，也可以是 Promise 或 Promise 数组。

```
//列表查询(无参数)
{
	courses {
    id:
	  score
	  course
	}
}
//有参数
query{
  user(id:3){
    id
    name
    sex
  }
}
//组合查询
{
	courses {
    id
	  score
	  course
	}
  users {
    id
    name
  }
}
//限制查询
query{
  users(limit:2){
    id
    sex
    name
  }
}


```

```
//变更
mutation {
  addUser (name:"nk",sex:"22",intro:"sdfasdfasdf"){
  id
  }
}
```

